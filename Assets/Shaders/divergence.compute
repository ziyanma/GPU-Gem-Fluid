// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#include "numthread.cginc"

Texture3D<float4> _Velocity;
SamplerState vel_linear_clamp_sampler;
RWTexture3D<float> Result;

[numthreads(NUMTHREADS, NUMTHREADS, NUMTHREADS)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	float3 L = _Velocity.Sample(vel_linear_clamp_sampler, uint3(id.x-1, id.y, id.z));
    float3 R = _Velocity.Sample(vel_linear_clamp_sampler, uint3(id.x+1, id.y, id.z));
    
    float3 B = _Velocity.Sample(vel_linear_clamp_sampler, uint3(id.x, id.y-1, id.z));
    float3 T = _Velocity.Sample(vel_linear_clamp_sampler, uint3(id.x, id.y+1, id.z));
    
    float3 D = _Velocity.Sample(vel_linear_clamp_sampler, uint3(id.x, id.y, id.z -1));
    float3 U = _Velocity.Sample(vel_linear_clamp_sampler, uint3(id.x, id.y, id.z +1));
    float divergence = 0.5 * ((R.x - L.x) + (T.y - B.y) + (U.z - D.z));
	Result[id.xyz] = divergence;
}
