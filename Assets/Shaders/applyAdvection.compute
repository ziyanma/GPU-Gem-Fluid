// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel AdvectVelocity
#pragma kernel Advect

#include "numthread.cginc"

Texture3D<float> _Obstacle;
#include "interpolation.cginc"

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
float _timeStep;
Texture3D<float4> _ReadVelocity;
RWTexture3D<float4> _WriteVelocity;

Texture3D<float> _Read;
RWTexture3D<float> _Write;

[numthreads(NUMTHREADS, NUMTHREADS, NUMTHREADS)]
void AdvectVelocity (uint3 id : SV_DispatchThreadID)
{
	float4 centerVel = _ReadVelocity[id];
	
	if (_Obstacle[id] > 0.1) {
		_WriteVelocity[id] = float4(0, 0, 0, 0);
		return;
	}

	float3 pos = id;
	pos -= _timeStep * float3(centerVel.xyz);
	_WriteVelocity[id] = SampleBilinearRGBA(pos, _ReadVelocity);
}

[numthreads(NUMTHREADS, NUMTHREADS, NUMTHREADS)]
void Advect (uint3 id : SV_DispatchThreadID)
{
	float4 centerVel = _ReadVelocity[id];
	
	if (_Obstacle[id] > 0.1) {
		_Write[id] = 0;
		return;
	}

	float3 pos = id;
	pos -= _timeStep * float3(centerVel.xyz);

	_Write[id] = SampleBilinearFloat(pos, _Read);
}
