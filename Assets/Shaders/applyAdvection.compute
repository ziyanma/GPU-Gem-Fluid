// Each #kernel tells which function to compile; you can have many kernels
#include "numthread.cginc"

Texture3D<float> _Obstacle;
#include "interpolation.cginc"

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
float _timeStep;
Texture3D<float4> _ReadVelocity;
RWTexture3D<float4> _WriteVelocity;

Texture3D<float> _Read;
RWTexture3D<float> _Write;

#pragma kernel AdvectVelocity
[numthreads(NUMTHREADS, NUMTHREADS, NUMTHREADS)]
void AdvectVelocity (uint3 id : SV_DispatchThreadID)
{
	float4 centerVel = _ReadVelocity[id];
	
	if (_Obstacle[id] > 0.1) {
		_WriteVelocity[id] = float4(0, 0, 0, 0);
		return;
	}

	float3 pos = id;
	pos -= float3(centerVel.xyz) * _timeStep;
	
	// _WriteVelocity[id] = _ReadVelocity[int3(round(pos.x), round(pos.y), round(pos.z))];
	// _WriteVelocity[id] = _ReadVelocity[int3(pos)];
	
	_WriteVelocity[id] = SampleBilinearRGBA(pos, _ReadVelocity);

}

#pragma kernel Advect
[numthreads(NUMTHREADS, NUMTHREADS, NUMTHREADS)]
void Advect (uint3 id : SV_DispatchThreadID)
{
	float4 centerVel = _ReadVelocity[id];
	
	if (_Obstacle[id] > 0.1) {
		_Write[id] = 0;
		return;
	}

	float3 pos = id;
	pos -=  centerVel.xyz * _timeStep;

	// _Write[id] = _Read[int3(pos)];
	// _Write[id] = _Read[int3(round(pos.x), round(pos.y), round(pos.z))];
	
	_Write[id] = SampleBilinearFloat(pos, _Read);	
}
