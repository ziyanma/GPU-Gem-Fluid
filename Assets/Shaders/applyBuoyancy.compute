#pragma kernel CSMain

#include "numthread.cginc"

float3 _Up;
float _AmbientTemperature, _DeltaTime, _Mass;

RWTexture3D<float3> _WriteVelocity;
Texture3D<float3> _ReadVelocity;
Texture3D<float> _Density, _Temperature, _Pressure;

[numthreads(NUMTHREADS, NUMTHREADS, NUMTHREADS)]
void CSMain (uint3 id : SV_DispatchThreadID)
{   
    float T = _Temperature[id];
    float D = _Density[id];
    float3 V = _ReadVelocity[id];
    float P = _Pressure[id];
    // 1 / T0 - 1 / T in GPU Gem
    if(T > _AmbientTemperature)
        V += (_DeltaTime * (T - _AmbientTemperature) - D * _Mass) * _Up;
    // V += (_DeltaTime * (_AmbientTemperature - T ) * D * _Mass * P) * _Up;
    // V += 
    if (length(V) > 1) normalize(V);
    _WriteVelocity[id] = V;
}

#pragma kernel WaterBuoyancy
[numthreads(NUMTHREADS, NUMTHREADS, NUMTHREADS)]
void WaterBuoyancy (uint3 id : SV_DispatchThreadID)
{
    float D = _Density[id];
    float3 V = _ReadVelocity[id];
    float P = _Pressure[id];
    V += (_DeltaTime - D * _Mass) * float3(0.0f, -0.015f, 0.0f);
    if (length(V) > 1) normalize(V);
    _WriteVelocity[id] = V;
}




















